InVe 2015-16      Andrew Malta (Mar 2016)
       16-17      Linc Berkley (Nov 2017)

InVe Sailboat Software Specifications

Node specifications
  a) captain
  b) airmar
  c) tactics
  d) sails_rudder
  e) servo_control


Custom Message Types:
  1. airmar/AirmarData:
      float64               heading
      float64               amrRoll
      float64               apWndDir
      float64               apWndSpd
      float64               cog
      float64               sog
      float64               truWndSpd
      float64               truWndDir
      float64               lat
      float64               long
      float64               XTE
      float64               VMG
      float64               VMGup

  2. captain/AutonomousStatus:
      bool currentlyAutonomous

  3. captain/CompetitionInfo:
      string  comp_mode
      float64 angle
      float64 xte_min
      float64 xte_max
      float64 gps_lat1
      float64 gps_long1
      float64 gps_lat2
      float64 gps_long2
      float64 gps_lat3
      float64 gps_long3
      float64 gps_lat4
      float64 gps_long4
      bool    currently_autonomous

  4. captain/LegInfo:
      float64 begin_lat
      float64 begin_long
      float64 end_lat
      float64 end_long
      float64 leg_course
      float64 xte_min
      float64 xte_max

  5. tactics/NavTargets:
      float64 targetCourse
      float64 targetRange
      float64 targetHeading
      string pointOfSail

  6. sails_rudder/SailsRudderPos:
      float64 mainPos
      float64 jibPos
      float64 rudderPos

Node Specifications

a) captain
   Subscriptions: /competition_info, /airmar_data
   Publications:  /leg_info, /autonomous_status

   Description: Determines the leg that the boat should sail.  If the previous leg is completed (also determined by capn, based on cartesian distance to end of leg + fidelity of gps), publishes the next leg

   Wait: Currently don't do anything. Could potentially choose to do something else like heave-to.
   SailToPoint mode: create a leg from current position directly to a lat, lon point.
   Maintain Heading: Create a leg 50 km from our current position using the angle passed in
                     competition info.
   MaintainPointOfSail: Create a leg 50 km from our current position, maintaining an angle to
                        the wind passed in by competition info.
   RoundAndReturn mode: use gpsTarg1 as a windward mark,gpsTarg2 as a return
      point. Create multiple legs to sail AROUND the mark (don't hit it!).  Set leg_info to the first leg.  When the first leg is complete, move on to the second leg, etc.
   StationKeeping mode: Stay within a box specified by four lat lon pairs passed in through
                        competition info.

b) airmar
   Subscriptions: /leg_info
   Publications:  /airmar_data

   Subscribes to LegInfo and uses this information to calculate cross track error. This node simply
   reads information from the airmar weather station sensor and populates/publishes the airmar_data
   topic used by various other nodes.

c) tactics
   Subscriptions: /leg_info, /airmar_data
   Publications:  /nav_targets

   Using the information in /airmar data and /leg_info, such as wind direction, our current XTE,
   our pointing angle, etc..  this node determines which way we should tack. This information is published in the /nav_targets topic.

d) sails_rudder
   Subscriptions: /airmar_data, /nav_targets
   Publications:  /sails_rudder_pos

   Given the nav_targets information published by tactics telling the boat where we want to go, this node determines the angles we need to change the rudder, main, and jib to achieve motion
   along this target_course. It publishes the /sails_rudder_pos topic which just consists of the three angles the node calculates.

e) servo_control
   Subscriptions: /sails_rudder_pos

   Subscribes to /sails_rudder_pos topic and changes the three servos to obtain the 3 angles on the rudder, main sail, and jib as specified in the topic.
